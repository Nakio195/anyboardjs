/*! AnyBoard 2015-08-03 */
"use strict";var AnyBoard=AnyBoard||{};"undefined"!=typeof module&&(module.exports=AnyBoard),AnyBoard.Drivers={drivers:{}},AnyBoard.Drivers.get=function(a){return this.drivers[a]},AnyBoard.Drivers._add=function(a){return a.name?(this.drivers[a.name]&&AnyBoard.Logger.warn("Driver with name + "+a.name+" already existed. Overwriting",this),void(this.drivers[a.name]=a)):void AnyBoard.Logger.warn("Attempted to add driver without name. Driver will be ignored.",this)},AnyBoard.Drivers.toString=function(){return"AnyBoard.Drivers (driverManager)"},AnyBoard.Driver=function(a){a.name&&a.description&&a.version||AnyBoard.Logger.error("Attempted to add driver without necessary options (name, description, version). Driver will be ignored.",this),this.name=a.name,this.description=a.description,this.dependencies=a.dependencies,this.version=a.version,this.date=a.date,this.properties=a,AnyBoard.Logger.debug("Loaded Driver "+a.name,this),AnyBoard.Drivers._add(this)},AnyBoard.Driver.prototype.toString=function(){return"Driver: "+this.name},AnyBoard.Deck=function(a,b){AnyBoard.Logger.debug("Adding new Deck "+a),this.name=a,this.cards=[],this.pile=[],this.usedPile=[],this.autoUsedRefill=!0,this.autoNewRefill=!1,this.playListeners=[],this.drawListeners=[],AnyBoard.Deck.all[this.name]?AnyBoard.Logger.warn("Deck with name "+this.name+" already exists. Old deck will no longer be available through AnyBoard.Deck.get",this):AnyBoard.Deck.all[this.name]=this,this.initiate(b)},AnyBoard.Deck.all={},AnyBoard.Deck.get=function(a){return AnyBoard.Deck.all[a]},AnyBoard.Deck.prototype.shuffle=function(){for(var a,b,c=this.pile.length;c;a=Math.floor(Math.random()*c),b=this.pile[--c],this.pile[c]=this.pile[a],this.pile[a]=b);},AnyBoard.Deck.prototype.initiate=function(a){a.hasOwnProperty("autoNewRefill")&&(this.autoNewRefill=a.autoNewRefill),a.hasOwnProperty("autoUsedRefill")&&(this.autoUsedRefill=a.autoUsedRefill);for(var b,c=0;c<a.cards.length;c++){b=new AnyBoard.Card(this,a.cards[c]);for(var d=0;d<b.amount;d++)this.cards.push(b)}this.refill(!0)},AnyBoard.Deck.prototype.refill=function(a){AnyBoard.Logger.debug("Refilling Deck "+this.name+" with "+(a?"new cards":"used pile."));var b=this.pile.slice();a?this.pile=this.cards.slice():this.pile=this.usedPile.slice(),this.shuffle(),this.pile.concat(b),a||(this.usedPile=[])},AnyBoard.Deck.prototype._draw=function(a,b){this.pile.length<1&&(this.autoNewRefill?this.refill(!0):this.autoUsedRefill&&this.refill(!1));var c=this.pile.pop();for(var d in this.drawListeners)this.drawListeners.hasOwnProperty(d)&&this.drawListeners[d](c,a,b);return c},AnyBoard.Deck.prototype.onPlay=function(a){AnyBoard.Logger.debug("Adds function to playListener of deck "+this.name),this.playListeners.push(a)},AnyBoard.Deck.prototype.onDraw=function(a){AnyBoard.Logger.debug("Adds function to drawListener of deck "+this.name),this.drawListeners.push(a)},AnyBoard.Deck.prototype.toString=function(){return"Deck: "+this.name},AnyBoard.Card=function(a,b){AnyBoard.Logger.debug("Adding new Card "+b.title),this.id=AnyBoard.Card.AUTO_INC(),this.title=b.title,this.description=b.description,this.color=b.color||null,this.category=b.category||null,this.value=b.value||null,this.type=b.type||null,this.amount=b.amount||1,this.properties=b,this.deck=a,AnyBoard.Card.all[this.id]=this,AnyBoard.Card.allTitle[this.title]&&AnyBoard.Logger.warn("Card with title "+this.title+" already exists. Old card will no longer be available through AnyBoard.Card.get",this),AnyBoard.Card.allTitle[this.title]=this},AnyBoard.Card.COUNTER=0,AnyBoard.Card.AUTO_INC=function(){return++AnyBoard.Card.COUNTER},AnyBoard.Card.all={},AnyBoard.Card.allTitle={},AnyBoard.Card.get=function(a){return"number"==typeof a?AnyBoard.Card.all[a]:AnyBoard.Card.allTitle[a]},AnyBoard.Card.prototype._play=function(a,b){for(var c in this.deck.playListeners)this.deck.playListeners.hasOwnProperty(c)&&this.deck.playListeners[c](this,a,b);this.deck.usedPile.push(this)},AnyBoard.Card.prototype.toString=function(){return"Card: "+this.title+", id: "+this.id},AnyBoard.Dices=function(a,b){this.eyes=a||6,this.numOfDice=b||1},AnyBoard.Dices.prototype.roll=function(){for(var a=0,b=0;b<this.numOfDice;b++)a+=Math.floor(Math.random()*this.eyes)+1;return a},AnyBoard.Dices.prototype.rollEach=function(){for(var a=[],b=0;b<this.numOfDice;b++)a.push(Math.floor(Math.random()*this.eyes)+1);return a},AnyBoard.Player=function(a,b){AnyBoard.Logger.debug("Adding new Player "+a),b=b||{},this.color=b.color,this.name=a,this.hand=new AnyBoard.Hand(this),this.faction=b.faction,this["class"]=b["class"],this.bank=new AnyBoard.ResourceSet,this.properties=b,AnyBoard.Player.all[this.name]&&AnyBoard.Logger.warn("Player with name "+this.name+" already exists. Old player will no longer be available through AnyBoard.Player.get",this),AnyBoard.Player.all[this.name]=this},AnyBoard.Player.all={},AnyBoard.Player.get=function(a){return AnyBoard.Player.all[a]},AnyBoard.Player.prototype.pay=function(a,b){return this.bank.contains(a)?(b&&b.recieve(a),AnyBoard.Logger.debug(""+this.name+" paid "+a.resources,this),this.bank.subtract(a),!0):(AnyBoard.Logger.debug(""+this.name+" does not have sufficient resources to pay "+a.resources,this),!1)},AnyBoard.Player.prototype.trade=function(a,b,c){var d=a.similarities(b);return b.subtract(d),a.subtract(d),this.bank.contains(a)?b&&c&&!c.bank.contains(b)?(AnyBoard.Logger.debug(""+c.name+" does not have sufficient resources to trade "+b.resources,this),!1):(c?c.pay(b,this):this.receive(b),this.pay(a,c),!0):(AnyBoard.Logger.debug(""+this.name+" does not have sufficient resources to trade "+a.resources,this),!1)},AnyBoard.Player.prototype.recieve=function(a){AnyBoard.Logger.debug(""+this.name+" received "+a.resources,this),this.bank.add(a)},AnyBoard.Player.prototype.draw=function(a,b){var c=a._draw(this,b);return c?(this.hand._add(c),AnyBoard.Logger.debug(""+this.name+" drew card "+c.title+" from deck "+a.name,this)):AnyBoard.Logger.debug(""+this.name+" couldn't draw from empty deck "+a.name,this),c},AnyBoard.Player.prototype.play=function(a,b){return AnyBoard.Logger.debug(""+this.name+" playes card "+a.title,this),this.hand.has(a)?(a._play(this,b),this.hand.cards[a.id]-=1,!0):(AnyBoard.Logger.debug(""+this.name+"'s Hand does not contain card "+a.title,this),!1)},AnyBoard.Player.prototype.toString=function(){return"Player: "+this.name},AnyBoard.Hand=function(a,b){AnyBoard.Logger.debug("Adding new Hand to player "+a.name),this.cards={},this.player=a,this.properties=b},AnyBoard.Hand.prototype.has=function(a,b){return b=b||1,this.cards[a.id]&&this.cards[a.id]>=b?(AnyBoard.Logger.debug(""+this.player.name+" has at least "+b+" card: "+a.title,this),!0):(AnyBoard.Logger.debug(""+this.player.name+" has less than "+b+" card: "+a.title,this),!1)},AnyBoard.Hand.prototype._add=function(a){this.cards[a.id]||(this.cards[a.id]=0),AnyBoard.Logger.debug(""+this.player.name+" added to hand, card "+a.title,this),this.cards[a.id]+=1},AnyBoard.Hand.prototype.toString=function(){return"Hand: belongs to "+(this.player?this.player.name:" no one")},AnyBoard.Resource=function(a,b){return AnyBoard.Logger.debug("Adding new Resource "+a),AnyBoard.Resource.all[this.name]?void AnyBoard.Logger.error("Resource with name "+this.name+" already exists",this):(this.name=a,this.properties=b,void(AnyBoard.Resource.all[this.name]=this))},AnyBoard.Resource.all={},AnyBoard.Resource.get=function(a){return AnyBoard.Resource.all[a]},AnyBoard.ResourceSet=function(a,b){AnyBoard.Logger.debug("Adding new ResourceSet (allowNegative: "+b+")"),this.resources={};for(var c in a)a.hasOwnProperty(c)&&("string"==typeof c?AnyBoard.Resource.get(c)?this.resources[c]=a[c]:AnyBoard.Logger.warn("Attempting to create ResourceSet with non-existant resource "+c+". Resource ignored."):c instanceof AnyBoard.Resource&&(this.resources[c.name]=a[c]));this.allowNegative=b||!1},AnyBoard.ResourceSet.prototype.contains=function(a){for(var b in a.resources)if(a.resources.hasOwnProperty(b)&&a.resources[b]>0&&(!this.resources.hasOwnProperty(b)||this.resources[b]<a.resources[b]))return!1;return!0},AnyBoard.ResourceSet.prototype.add=function(a){for(var b in a.resources)a.resources.hasOwnProperty(b)&&(this.resources.hasOwnProperty(b)||(this.resources[b]=0),this.resources[b]+=a.resources[b])},AnyBoard.ResourceSet.prototype.subtract=function(a){if(!this.allowNegative&&!this.contains(a))return!1;for(var b in a.resources)a.resources.hasOwnProperty(b)&&(this.resources.hasOwnProperty(b)||(this.resources[b]=0),this.resources[b]-=a.resources[b]);return!0},AnyBoard.ResourceSet.prototype.similarities=function(a){var b={};for(var c in a.resources)a.resources.hasOwnProperty(c)&&this.resources.hasOwnProperty(c)&&(b[c]=Math.min(this.resources[c],a.resources[c]));return b},AnyBoard.TokenManager={tokens:{},driver:null},AnyBoard.TokenManager.setDriver=function(a){a.connect&&"function"==typeof a.connect||AnyBoard.Logger.warn("Could not find connect() on given driver.",this),a.disconnect&&"function"==typeof a.disconnect||AnyBoard.Logger.warn("Could not find disconnect() on given driver",this),a.scan&&"function"==typeof a.scan||AnyBoard.Logger.warn("Could not find scan() on given driver",this),a.sendString&&"function"==typeof a.sendString||AnyBoard.Logger.warn("Could not find sendString() on given driver",this),a.send&&"function"==typeof a.send||AnyBoard.Logger.warn("Could not find send() on given driver",this),(!this.driver||a.connect&&"function"==typeof a.connect&&a.disconnect&&"function"==typeof a.disconnect&&a.scan&&"function"==typeof a.scan&&a.sendString&&"function"==typeof a.sendString&&a.send&&"function"==typeof a.send)&&(this.driver=a)},AnyBoard.TokenManager.scan=function(a,b,c){this.driver.scan(function(b){AnyBoard.TokenManager.tokens[b.address]=b,a(b)},b,c)},AnyBoard.TokenManager.get=function(a){return this.tokens[a]},AnyBoard.BaseToken=function(a,b,c,d){this.name=a,this.address=b,this.connected=!1,this.device=c,this.listeners={},this.driver=d},AnyBoard.BaseToken.prototype.isConnected=function(){return this.connected},AnyBoard.BaseToken.prototype.connect=function(a,b){AnyBoard.Logger.debug("Attempting to connect to "+this);var c=this.driver||AnyBoard.TokenManager.driver,d=this;c.connect(d,function(b){AnyBoard.Logger.debug("Connected to "+d),d.connected=!0,d.device=b,d.trigger("connect",{device:d}),a(b)},function(a){AnyBoard.Logger.debug("Could not connect to "+d+". "+a),d.connected&&d.trigger("disconnect",{device:d}),d.connected=!1,b(a)})},AnyBoard.BaseToken.prototype.disconnect=function(){var a=this.driver||AnyBoard.TokenManager.driver;a.disconnect(this),AnyBoard.Logger.debug(""+this+" disconnected",this),this.connected=!1,this.trigger("disconnect",{device:this})},AnyBoard.BaseToken.prototype.trigger=function(a,b){if(AnyBoard.Logger.debug(""+this+' triggered "'+a+'"'),this.listeners[a])for(var c in this.listeners[a])this.listeners[a][c](this,b)},AnyBoard.BaseToken.prototype.on=function(a,b){AnyBoard.Logger.debug(""+this+" added listener to event: "+a,this),this.listeners[a]||(this.listeners[a]=[]),this.listeners[a].push(b)},AnyBoard.BaseToken.prototype.sendBuffer=function(a,b,c){if(AnyBoard.Logger.debug(""+this+" attempting to send with data: "+a,this),this.isConnected()){var d=this.driver||AnyBoard.TokenManager.driver;d.send(this,a,b,c)}else{AnyBoard.Logger.warn(this+" is not connected. Attempting to connect first.",this);var e=this;this.connect(function(d){e.sendBuffer(a,b,c)},function(a){c(a)})}},AnyBoard.BaseToken.prototype.sendString=function(a,b,c){if(AnyBoard.Logger.debug("Token: "+this+" attempting to sendString with data: "+a,this),this.isConnected()){var d=this.driver||AnyBoard.TokenManager.driver;d.sendString(this,a,b,c)}else{AnyBoard.Logger.warn(this+" is not connected. Attempting to connect first.",this);var e=this;this.connect(function(d){e.sendString(a,b,c)},function(a){c(a)})}},AnyBoard.BaseToken.prototype.send=function(a,b,c){a instanceof Uint8Array||a instanceof Uint16Array||a instanceof Uint32Array||a instanceof ArrayBuffer?this.sendBuffer(this,a,b,c):this.sendString(this,a,b,c)},AnyBoard.BaseToken.prototype.toString=function(){return"Token: "+this.name+" ("+this.address+")"},AnyBoard.DummyToken=function(a,b){AnyBoard.BaseToken.call(this,a,b),this.driver=new AnyBoard.Driver({send:function(a,b,c){AnyBoard.Logger.log("SIMULTE SEND: "+a,this),a instanceof Uint8Array?b():c("wrong format")},sendString:function(a,b,c){AnyBoard.Logger.log("SIMULTE SENDSTRING: "+a,this),"string"==typeof a?b():c("wrong format")},connect:function(a,b,c){AnyBoard.Logger.log("SIMULTE CONNECT: "+data,this),b({dummyDevice:"OK"})},disconnect:function(a){return AnyBoard.Logger.log("SIMULTE DISCONNECT: "+data,this),!0}})},AnyBoard.DummyToken.prototype=new AnyBoard.BaseToken,AnyBoard.DummyToken.prototype.constructor=AnyBoard.DummyToken,AnyBoard.Logger={threshold:10,debugLevel:0,normalLevel:10,warningLevel:20,errorLevel:30,loggerObject:console,message:function(a,b,c){var d="AnyBoard ("+a+"): "+b+(c?" ("+c+")":"");(this.threshold<=a||this.errorLevel<=a)&&this.debugLevel<=a&&(a>=this.errorLevel?this.loggerObject.error&&this.loggerObject.error(d):a>=this.warningLevel?this.loggerObject.warn&&this.loggerObject.warn(d):a>=this.normalLevel?this.loggerObject.log&&this.loggerObject.log(d):this.loggerObject.debug&&this.loggerObject.debug(d)),"undefined"!=typeof hyper&&hyper.log(d)},warn:function(a,b){this.message(this.warningLevel,a,b)},error:function(a,b){this.message(this.errorLevel,a,b)},log:function(a,b){this.message(this.normalLevel,a,b)},debug:function(a,b){this.message(this.debugLevel,a,b)}};